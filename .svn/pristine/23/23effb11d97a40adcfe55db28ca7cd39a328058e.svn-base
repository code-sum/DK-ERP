package kr.happyjob.study.empApm.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.empApm.model.EmpApmModel;
import kr.happyjob.study.empApm.service.EmpApmService;

@Controller
@RequestMapping("/empApm/")
public class EmpApmController {

	@Autowired
	EmpApmService empApmService;

	// Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	// Get class name for logger
	private final String className = this.getClass().toString();

	/**
	 * 초기화면
	 */
	@RequestMapping("approManagement.do")
	public String approManagement(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception {

		logger.info("+ Start " + className + ".approManagement");
		logger.info("   - approManagement.do ParamMap :: " + paramMap);
		logger.info("+ End " + className + ".approManagement");

		return "empApm/approManagement";
	}

	@RequestMapping("approManagementList.do")
	public String approManagementList(Model model, @RequestParam Map<String, Object> paramMap,
			HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {

		logger.info("+ Start " + className + ".approManagementList");
		logger.info("   - approManagementList.do ParamMap :: " + paramMap);

		int pagenum = Integer.parseInt((String) paramMap.get("pagenum"));
		int pageSize = Integer.parseInt((String) paramMap.get("pageSize"));
		int pageindex = (pagenum - 1) * pageSize;

		paramMap.put("pageSize", pageSize);
		paramMap.put("pageindex", pageindex);

		List<EmpApmModel> listSearch = empApmService.approManagementList(paramMap);
		// 이거 mapper 에서 
		// 쿼리가 이상한게 아닌가 싶은데 
		for(EmpApmModel item : listSearch ) {
			logger.info("[approManagementList.do] item : " + item.toString());
		}
		

		int totalcnt = empApmService.countList(paramMap);
		logger.info("[approManagementList.do] totalcnt :: " + totalcnt);

		model.addAttribute("listSearch", listSearch); // listSearch 라는 이름으로
														// 반환합니다.
		model.addAttribute("totalcnt", totalcnt);

		logger.info("+ End " + className + ".approManagementList");

		return "empApm/approManagementGrd";
	}

	@RequestMapping("listSelectOneApm.do")
	@ResponseBody
	public Map<String, Object> listSelectOneApm(Model model, @RequestParam Map<String, Object> paramMap,
			HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {

		logger.info("+ Start " + className + ".listSelectOneApm.do");
		logger.info("   - paramMap : " + paramMap);

		EmpApmModel listSearch = empApmService.listSelectOneApm(paramMap);
		Map<String, Object> returnmap = new HashMap<String, Object>();

		returnmap.put("listSearch", listSearch);
		logger.info("   - listSearch : " + listSearch.toString());

		logger.info("+ End " + className + ".listSelectOneApm.do");

		return returnmap;
	}

	@RequestMapping("updateApmStatus.do")
	@ResponseBody
	public Map<String, Object> updateApmStatus(Model model, @RequestParam Map<String, Object> paramMap,
			HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {

		logger.info("+ Start " + className + ".updateApmStatus");
		logger.info("   - paramMap : " + paramMap);

		String action = (String) paramMap.get("action");

		paramMap.put("loginID", (String) session.getAttribute("loginId"));
		// 일단 paramMap 에 넘겨주려면 데이터 어떤식으로 들어오는 지 볼거임
		// 그래서 서비스 비활성화 해놓고 볼겁니다 
		// {appro_yn=N, appro_no=66, appro_rej_reason=ㅇㅇ, action=U}

		int returncval = 0;

		if ("U".equals(action)) {
			returncval = empApmService.updateApmStatus(paramMap);
		}

		Map<String, Object> result = new HashMap<String, Object>();
//		// 결과값에 returncval 에 update 한 결과를 int 형태로 담아서 이 값을 보고 성공했는지 실패했는지 주는거같음
		result.put("returncval", returncval);
		logger.info("+ End " + className + ".updateApmStatus");
		return result;
	}

}